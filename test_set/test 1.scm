(define find-subsets 
    (lambda (set)
      (cond ((null? set) '(()))
	    (else (let ((subsets-without-first (find-subsets (cdr set))))
		 (append subsets-without-first (map (lambda (x) (cons (car set) x)) subsets-without-first) )
		 )))))

(and (equal? (find-subsets '(a b c)) '(() (c) (b) (b c) (a) (a c) (a b) (a b c)))
      (equal? (find-subsets '(a b c d e f g)) '(() (g) (f) (f g) (e) (e g) (e f) (e f g) (d) (d g) (d f)
 (d f g) (d e) (d e g) (d e f) (d e f g) (c) (c g) (c f)
 (c f g) (c e) (c e g) (c e f) (c e f g) (c d) (c d g)
 (c d f) (c d f g) (c d e) (c d e g) (c d e f) (c d e f g)
 (b) (b g) (b f) (b f g) (b e) (b e g) (b e f) (b e f g)
 (b d) (b d g) (b d f) (b d f g) (b d e) (b d e g) (b d e f)
 (b d e f g) (b c) (b c g) (b c f) (b c f g) (b c e)
 (b c e g) (b c e f) (b c e f g) (b c d) (b c d g) (b c d f)
 (b c d f g) (b c d e) (b c d e g) (b c d e f) (b c d e f g)
 (a) (a g) (a f) (a f g) (a e) (a e g) (a e f) (a e f g)
 (a d) (a d g) (a d f) (a d f g) (a d e) (a d e g) (a d e f)
 (a d e f g) (a c) (a c g) (a c f) (a c f g) (a c e)
 (a c e g) (a c e f) (a c e f g) (a c d) (a c d g) (a c d f)
 (a c d f g) (a c d e) (a c d e g) (a c d e f) (a c d e f g)
 (a b) (a b g) (a b f) (a b f g) (a b e) (a b e g) (a b e f)
 (a b e f g) (a b d) (a b d g) (a b d f) (a b d f g)
 (a b d e) (a b d e g) (a b d e f) (a b d e f g) (a b c)
 (a b c g) (a b c f) (a b c f g) (a b c e) (a b c e g)
 (a b c e f) (a b c e f g) (a b c d) (a b c d g) (a b c d f)
 (a b c d f g) (a b c d e) (a b c d e g) (a b c d e f)
 (a b c d e f g))
))


		   